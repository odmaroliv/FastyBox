@inject IJSRuntime JSRuntime

<button @onclick="ToggleTheme" type="button" class="flex items-center text-gray-500 dark:text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 focus:outline-none">
    @if (_isDarkMode)
    {
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
        </svg>
    }
    else
    {
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
        </svg>
    }
</button>

@code {
    private bool _isDarkMode = false;
    private bool _isFirstRender = true;

    // No JavaScript calls during OnInitializedAsync
    protected override void OnInitialized()
    {
        // Set a default value for initial rendering
        // This value will be updated correctly after render
        _isDarkMode = false;
    }

    // Move all JavaScript interop to OnAfterRenderAsync
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Only call JavaScript after the first render
            _isDarkMode = await JSRuntime.InvokeAsync<bool>("isDarkMode");
            _isFirstRender = false;

            // Since we've updated state, trigger a re-render
            StateHasChanged();
        }
    }

    private async Task ToggleTheme()
    {
        await JSRuntime.InvokeVoidAsync("toggleTheme");
        _isDarkMode = !_isDarkMode;
    }
}