@namespace FastyBox.Web.Shared.Components

<div class="@GetContainerClass()">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@Id" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">@Label</label>
    }

    <div class="relative rounded-md shadow-sm">
        @if (!string.IsNullOrEmpty(LeadingIcon))
        {
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <i class="@LeadingIcon text-gray-400"></i>
            </div>
        }

        @if (TextArea)
        {
            <textarea id="@Id"
                      class="@GetInputClass()"
                      placeholder="@Placeholder"
                      rows="@Rows"
                      disabled="@Disabled"
                      readonly="@ReadOnly"
                      @bind="CurrentValue"
                      @bind:event="oninput"
                      @onblur="OnBlur">
                </textarea>
        }
        else
        {
            <input id="@Id"
                   type="@Type"
                   class="@GetInputClass()"
                   placeholder="@Placeholder"
                   disabled="@Disabled"
                   readonly="@ReadOnly"
                   @bind="CurrentValue"
                   @bind:event="oninput"
                   @onblur="OnBlur">
        }

        @if (!string.IsNullOrEmpty(TrailingIcon))
        {
            <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                <i class="@TrailingIcon text-gray-400"></i>
            </div>
        }
    </div>

    @if (!string.IsNullOrEmpty(HelperText))
    {
        <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">@HelperText</p>
    }

    @if (HasError && ErrorMessages != null && ErrorMessages.Any())
    {
        <p class="mt-1 text-sm text-red-600 dark:text-red-400">@string.Join(", ", ErrorMessages)</p>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; } = Guid.NewGuid().ToString();

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public string Placeholder { get; set; }

    [Parameter]
    public string Type { get; set; } = "text";

    [Parameter]
    public string LeadingIcon { get; set; }

    [Parameter]
    public string TrailingIcon { get; set; }

    [Parameter]
    public string HelperText { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public bool TextArea { get; set; }

    [Parameter]
    public int Rows { get; set; } = 3;

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public bool FullWidth { get; set; } = true;

    [Parameter]
    public bool HasError { get; set; }

    [Parameter]
    public IEnumerable<string> ErrorMessages { get; set; }

    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<FocusEventArgs> OnBlur { get; set; }

    private string CurrentValue
    {
        get => Value;
        set
        {
            if (Value != value)
            {
                Value = value;
                ValueChanged.InvokeAsync(value);
            }
        }
    }

    private string GetContainerClass()
    {
        return FullWidth ? "w-full" : "";
    }

    private string GetInputClass()
    {
        var classes = "input ";

        if (!string.IsNullOrEmpty(LeadingIcon))
        {
            classes += "pl-10 ";
        }

        if (!string.IsNullOrEmpty(TrailingIcon))
        {
            classes += "pr-10 ";
        }

        if (HasError)
        {
            classes += "border-red-300 text-red-900 placeholder-red-300 focus:ring-red-500 focus:border-red-500 dark:border-red-600 dark:focus:border-red-500 dark:focus:ring-red-500 ";
        }

        if (!string.IsNullOrEmpty(Class))
        {
            classes += $"{Class} ";
        }

        return classes.TrimEnd();
    }
}
