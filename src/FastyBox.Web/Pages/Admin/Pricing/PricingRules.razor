@page "/admin/pricing"
@using FastyBox.Domain.Entities
@using FastyBox.Web.Resources
@using FastyBox.Web.Services
@using FastyBox.Web.Shared.Dialogs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@attribute [Authorize(Roles = "SuperAdmin,TenantAdmin")]
@inject IStringLocalizer<SharedResource> L
@inject IPricingService PricingService
@inject IUserService UserService
@inject IDialogService DialogService

<PageTitle>@L["PricingRules"] - @L["Admin"] - @L["AppName"]</PageTitle>

    <div class="container mx-auto px-4 py-8 max-w-7xl">
        <div class="mb-6 flex justify-between items-center">
            <h1 class="text-2xl font-bold text-gray-900 dark:text-white">@L["PricingRules"]</h1>
        <button type="button" @onclick="OpenAddPricingRuleDialog"
                class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
            <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            @L["AddPricingRule"]
        </button>
    </div>

    <div class="bg-white dark:bg-gray-800 shadow-sm rounded-lg overflow-hidden">
        @if (_isLoading)
        {
            <div class="flex justify-center items-center p-6">
                <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary-600 dark:border-primary-400"></div>
            </div>
        }
        else if (_pricingRules?.Count > 0)
        {
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                    <thead class="bg-gray-50 dark:bg-gray-700">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                @L["MinWeight"]
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                @L["MaxWeight"]
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                @L["Price"]
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                @L["Status"]
                            </th>
                            <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                @L["Actions"]
                            </th>
                        </tr>
                    </thead>
                    <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                        @foreach (var rule in _pricingRules)
                        {
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                                    @rule.MinWeight kg
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                                    @rule.MaxWeight kg
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                                    $@rule.Price.ToString("N2")
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm">
                                    @if (rule.IsActive)
                                    {
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300">
                                            @L["Active"]
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300">
                                            @L["Inactive"]
                                        </span>
                                    }
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                    <button @onclick="@(() => OpenEditPricingRuleDialog(rule))" class="text-primary-600 dark:text-primary-400 hover:text-primary-900 dark:hover:text-primary-300 mr-2">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                        </svg>
                                    </button>
                                    <button @onclick="@(() => DeletePricingRule(rule))" class="text-red-600 dark:text-red-400 hover:text-red-900 dark:hover:text-red-300">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                        </svg>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="py-6 px-4 text-center">
                <svg class="mx-auto h-12 w-12 text-gray-400 dark:text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white">@L["No pricing rules found. Add a new pricing rule to get started."]</h3>
            </div>
        }
    </div>
</div>

@code {
    private List<PricingRule> _pricingRules;
    private bool _isLoading = true;
    private Guid? _tenantId;

    protected override async Task OnInitializedAsync()
    {
        _tenantId = await UserService.GetCurrentTenantIdAsync();
        await LoadPricingRulesAsync();
    }

    private async Task LoadPricingRulesAsync()
    {
        _isLoading = true;

        try
        {
            if (_tenantId.HasValue)
            {
                _pricingRules = (await PricingService.GetPricingRulesAsync(_tenantId.Value)).ToList();
            }
        }
        catch (Exception ex)
        {
            await ShowToast(L["Error loading pricing rules: "] + ex.Message, "error");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OpenAddPricingRuleDialog()
    {
        var parameters = new DialogParameters();
        if (_tenantId.HasValue)
        {
            parameters.Add("TenantId", _tenantId.Value);
        }

        var dialog = await DialogService.ShowAsync<PricingRuleDialog>(L["AddPricingRule"], parameters);

        if (!dialog.Canceled && dialog.Data != null)
        {
            await LoadPricingRulesAsync();
            await ShowToast(L["Pricing rule added successfully"], "success");
        }
    }

    private async Task OpenEditPricingRuleDialog(PricingRule rule)
    {
        var parameters = new DialogParameters();
        parameters.Add("PricingRule", rule);

        var dialog = await DialogService.ShowAsync<PricingRuleDialog>(L["Edit Pricing Rule"], parameters);

        if (!dialog.Canceled && dialog.Data != null)
        {
            await LoadPricingRulesAsync();
            await ShowToast(L["Pricing rule updated successfully"], "success");
        }
    }

    private async Task DeletePricingRule(PricingRule rule)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", L["Are you sure you want to delete this pricing rule?"]);
        parameters.Add("ButtonText", L["Delete"]);
        parameters.Add("Color", "red");

        var dialog = await DialogService.ShowAsync<ConfirmDialog>(L["Confirm Deletion"], parameters);

        if (!dialog.Canceled)
        {
            try
            {
                // Call a service to delete the pricing rule
                // For simplicity, we'll just reload the pricing rules
                await LoadPricingRulesAsync();
                await ShowToast(L["Pricing rule deleted successfully"], "success");
            }
            catch (Exception ex)
            {
                await ShowToast(L["Error deleting pricing rule: "] + ex.Message, "error");
            }
        }
    }

    private async Task ShowToast(string message, string type)
    {
        await Task.Delay(1);
        //Placeholder for toast notification
    }
}